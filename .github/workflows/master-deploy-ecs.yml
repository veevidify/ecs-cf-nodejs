# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.

name: "(Master) Deploy to Amazon ECS"

on:
  # push:
  #   branches: ["master"]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-2.amazonaws.com
  ECS_SERVICE: ${{ vars.SERVICE_NAME }}
  ECS_CLUSTER: ${{ vars.CLUSTER_NAME }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build new nginx image for deployment
          docker build -t $ECR_REPOSITORY/${{ vars.IMAGE_NGINX }}:$IMAGE_TAG -f ops/resources/nginx/Dockerfile ./ops/resources/nginx
          docker push $ECR_REPOSITORY/${{ vars.IMAGE_NGINX }}:$IMAGE_TAG
          NGINX_IMG=$ECR_REPOSITORY/${{ vars.IMAGE_NGINX }}:$IMAGE_TAG
          echo "$NGINX_IMG"
          echo "nginx=$NGINX_IMG" >> $GITHUB_OUTPUT

          # Build new app image for deployment
          docker build -t $ECR_REPOSITORY/${{ vars.IMAGE_NODE }}:$IMAGE_TAG -f ops/resources/node/Dockerfile .
          docker push $ECR_REPOSITORY/${{ vars.IMAGE_NODE }}:$IMAGE_TAG
          APP_IMG=$ECR_REPOSITORY/${{ vars.IMAGE_NODE }}:$IMAGE_TAG
          echo "$APP_IMG"
          echo "app=$APP_IMG" >> $GITHUB_OUTPUT

      - name: Download existing task definitions from AWS
        id: download-task-def
        run: |
          # template
          aws ecs describe-task-definition --task-definition EcsHttpNginxNodeecs-node --query taskDefinition > ops/staging/task-def.json
          # check vars
          echo "nginx=${{ steps.build-image.outputs.nginx }}"
          echo "app=${{ steps.build-image.outputs.app }}"

      - name: Render Amazon ECS task definition for NGINX container
        id: render-nginx-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ops/staging/task-def.json
          container-name: nginx
          image: ${{ steps.build-image.outputs.nginx }}

      - name: Modify Amazon ECS task definition with APP container
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-nginx-container.outputs.task-definition }}
          container-name: app
          image: ${{ steps.build-image.outputs.app }}
          environment-variables: |
            LOG_LEVEL=info
            APP_ENV=staging

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true
